{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"laminas-barcode üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º –ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\" üá∫üá∏ To Citizens of Russia We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" Maintenance mode This package is considered feature-complete, and is now in security-only maintenance mode, following a decision by the Technical Steering Committee . If you have a security issue, please follow our security reporting guidelines . If you wish to take on the role of maintainer, please nominate yourself If you are looking for an actively maintained package alternative, we recommend: tecnickcom/tcpdf picqer/php-barcode-generator Laminas\\Barcode provides a generic way to generate barcodes. The Laminas\\Barcode component is divided into two subcomponents: barcode objects and renderers. Objects allow you to create barcodes independently of the renderer. Renderer allow you to draw barcodes based on the support required. File issues at https://github.com/laminas/laminas-barcode/issues Documentation is at https://docs.laminas.dev/laminas-barcode/","title":"Home"},{"location":"#laminas-barcode","text":"","title":"laminas-barcode"},{"location":"#_1","text":"–ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\"","title":"üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º"},{"location":"#to-citizens-of-russia","text":"We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\"","title":"üá∫üá∏ To Citizens of Russia"},{"location":"#maintenance-mode","text":"This package is considered feature-complete, and is now in security-only maintenance mode, following a decision by the Technical Steering Committee . If you have a security issue, please follow our security reporting guidelines . If you wish to take on the role of maintainer, please nominate yourself If you are looking for an actively maintained package alternative, we recommend: tecnickcom/tcpdf picqer/php-barcode-generator Laminas\\Barcode provides a generic way to generate barcodes. The Laminas\\Barcode component is divided into two subcomponents: barcode objects and renderers. Objects allow you to create barcodes independently of the renderer. Renderer allow you to draw barcodes based on the support required. File issues at https://github.com/laminas/laminas-barcode/issues Documentation is at https://docs.laminas.dev/laminas-barcode/","title":"Maintenance mode"},{"location":"intro/","text":"Introduction Laminas\\Barcode\\Barcode provides a generic way to generate barcodes. The Laminas\\Barcode component is divided into two subcomponents: barcode objects and renderers. Objects allow you to create barcodes independently of the renderer. Renderers allow you to draw barcodes based on the target output.","title":"Introduction"},{"location":"intro/#introduction","text":"Laminas\\Barcode\\Barcode provides a generic way to generate barcodes. The Laminas\\Barcode component is divided into two subcomponents: barcode objects and renderers. Objects allow you to create barcodes independently of the renderer. Renderers allow you to draw barcodes based on the target output.","title":"Introduction"},{"location":"objects/","text":"Barcode Objects Barcode objects allow you to generate barcodes independently of the rendering support. After generation, you can retrieve the barcode as an array of drawing instructions to provide to a renderer. Objects have a large number of options, most of which are common across all implementations. These options can be set in three ways: As an array or a Traversable object passed to the constructor. As an array passed to the setOptions() method. Via individual setters for each configuration type. Different ways to parameterize a barcode object use Laminas\\Barcode\\Object; $options = ['text' =&gt; 'ZEND-FRAMEWORK', 'barHeight' =&gt; 40]; // Case 1: constructor $barcode = new Object\\Code39($options); // Case 2: setOptions() $barcode = new Object\\Code39(); $barcode-&gt;setOptions($options); // Case 3: individual setters $barcode = new Object\\Code39(); $barcode-&gt;setText('ZEND-FRAMEWORK') -&gt;setBarHeight(40); Common Options In the following list, the values have no units; as such, we will use the generic term \"unit.\" For example, the default value of the \"thin bar\" is \"1 unit\". The real units depend on the rendering support (see the [renderers documentation] (renderers.md) for more information). Setters are each named by uppercasing the initial letter of the option and prefixing the name with \"set\" (e.g. barHeight becomes setBarHeight ). All options have a corresponding getter prefixed with \"get\" (e.g. getBarHeight ). Available options are: Option Data Type Default Value Description barcodeNamespace string Laminas\\Barcode\\Object Namespace of the barcode; for example, if you need to extend the embedding objects. barHeight int 50 Height of the bars. barThickWidth int 3 Width of the thick bar. barThinWidth int 1 Width of the thin bar. factor int, float, string, or Bool 1 Factor by which to multiply bar widths and font sizes ( barHeight , barThinWidth , barThickWidth , and fontSize ). foreColor int 0x000000 (black) Color of the bar and the text. Could be provided as an integer or as a HTML value (e.g. #333333 ). backgroundColor int or string 0xFFFFFF (white) Color of the background. Could be provided as an integer or as a HTML value (e.g. #333333 ). orientation int, float, string, or Bool 0 Orientation of the barcode. font string or Int NULL Font path to a TTF font or a number between 1 and 5 if using image generation with GD (internal fonts). fontSize float 10 Size of the font (not applicable with numeric fonts). withBorder bool FALSE Draw a border around the barcode and the quiet zones. withQuietZones bool TRUE Leave a quiet zone before and after the barcode. drawText bool TRUE Set if the text is displayed below the barcode. stretchText bool FALSE Specify if the text is stretched all along the barcode. withChecksum bool FALSE Indicate whether or not the checksum is automatically added to the barcode. withChecksumInText bool FALSE Indicate whether or not the checksum is displayed in the textual representation. providedChecksum bool FALSE Indicate whether or not the checksum is provided with the barcode text. (Available since 2.8.0) text string NULL The text to represent as a barcode. Text with checksum Available since 2.8.0 With barcodes where checksum is mandatory ( EAN 8, EAN 13, ITF 14, Leitcode, Identcode, UPC -A, UPC -E, Postnet, Royalmail) you can provide text with checksum: $barcode = new Ean13([ 'text' =&gt; '1234567890128', 'providedChecksum' =&gt; true, ]); where 8 is checksum. Without checksum it will be: $barcode = new Ean13([ 'text' =&gt; '123456789012', ]); and the final result of the rendered barcode is the same. Setting a common font for all objects You can set a common font for all your objects by using the static method Laminas\\Barcode\\Barcode::setBarcodeFont() . This value can be always be overridden for individual objects by using the setFont() method. use Laminas\\Barcode\\Barcode; // In your bootstrap: Barcode::setBarcodeFont('my_font.ttf'); // Later in your code: Barcode::render( 'code39', 'pdf', ['text' =&gt; 'ZEND-FRAMEWORK'] ); // will use 'my_font.ttf' // or: Barcode::render( 'code39', 'image', [ 'text' =&gt; 'ZEND-FRAMEWORK', 'font' =&gt; 3, ] ); // will use the 3rd GD internal font Common Additional Getters Getter Data Type Description getType() string Return the name of the barcode class without the namespace (e.g. Laminas\\Barcode\\Object\\Code39 returns simply \"code39\"). getRawText() string Return the original text provided to the object. getTextToDisplay() string Return the text to display, including, if activated, the checksum value. getQuietZone() int Return the size of the space needed before and after the barcode without any drawing. getInstructions() array Return drawing instructions as an array.. getHeight($recalculate = false) int Return the height of the barcode calculated after possible rotation. getWidth($recalculate = false) int Return the width of the barcode calculated after possible rotation. getOffsetTop($recalculate = false) int Return the position of the top of the barcode calculated after possible rotation. getOffsetLeft($recalculate = false) int Return the position of the left of the barcode calculated after possible rotation. Description of shipped barcodes Below is detailed information on all barcode types supported. Unless otherwise noted, each barcode supports the general options outlined in the previous section, and no others. Laminas\\Barcode\\Object\\Error This barcode is a special case. It is internally used to automatically render an exception caught by the component. Laminas\\Barcode\\Object\\Code128 Name: Code 128 Allowed characters: the complete ASCII-character set Checksum: optional (modulo 103) Length: variable Laminas\\Barcode\\Object\\Codabar Name: Codabar (or Code 2 of 7) Allowed characters: 0123456789-\\$:/.+ with ABCD as start and stop characters Checksum: none Length: variable Laminas\\Barcode\\Object\\Code25 Name: Code 25 (or Code 2 of 5 or Code 25 Industrial) Allowed characters: 0123456789 Checksum: optional (modulo 10) Length: variable Laminas\\Barcode\\Object\\Code25interleaved This barcode extends Laminas\\Barcode\\Object\\Code25 (Code 2 of 5), with the following changes: Name: Code 2 of 5 Interleaved Allowed characters: 0123456789 Checksum: optional (modulo 10) Length: variable (always even number of characters) It also defines the following additional option: Option Data Type Default Value Description withBearerBars bool FALSE Draw a thick bar at the top and the bottom of the barcode. If the number of characters is not even, Laminas\\Barcode\\Object\\Code25interleaved will automatically prepend the missing zero to the barcode text. Laminas\\Barcode\\Object\\Ean2 This barcode extends Laminas\\Barcode\\Object\\Ean5 ( EAN 5), with the following changes: Name: EAN -2 Allowed characters: 0123456789 Checksum: Used internally, but not displayed Length: 2 characters If the number of characters is lower than 2, Laminas\\Barcode\\Object\\Ean2 will automatically prepend the missing zero to the barcode text. Laminas\\Barcode\\Object\\Ean5 This barcode extends Laminas\\Barcode\\Object\\Ean13 ( EAN 13), with the following changes: Name: EAN -5 Allowed characters: 0123456789 Checksum: Used internally, but not displayed Length: 5 characters If the number of characters is lower than 5, Laminas\\Barcode\\Object\\Ean5 will automatically prepend zeroes to the barcode text until it reaches 5 characters. Laminas\\Barcode\\Object\\Ean8 This barcode extends Laminas\\Barcode\\Object\\Ean13 ( EAN 13), with the following changes: Name: EAN -8 Allowed characters: 0123456789 Checksum: mandatory (modulo 10) Length: 8 characters (including checksum) If the number of characters is lower than 8, Laminas\\Barcode\\Object\\Ean8 will automatically prepend zeros to the barcode text until it reaches 8 characters. Laminas\\Barcode\\Object\\Ean13 Name: EAN -13 Allowed characters: 0123456789 Checksum: mandatory (modulo 10) Length: 13 characters (including checksum) If the number of characters is lower than 13, Laminas\\Barcode\\Object\\Ean13 will automatically prepend zeros to the barcode text until it reaches 13 characters. The option withQuietZones has no effect with this barcode. Laminas\\Barcode\\Object\\Code39 Name: Code 39 Allowed characters: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ -.\\$/+% Checksum: optional (modulo 43) Length: variable Laminas\\Barcode\\Object\\Code39 automatically adds the start and stop characters ( * ) for you. Laminas\\Barcode\\Object\\Identcode This barcode extends Laminas\\Barcode\\Object\\Code25interleaved (Code 2 of 5 Interleaved), inheriting its capabilities and defining some of its own. Name: Identcode (Deutsche Post Identcode) Allowed characters: 0123456789 Checksum: mandatory (modulo 10 different from Code25) Length: 12 characters (including checksum) If the number of characters is lower than 12, Laminas\\Barcode\\Object\\Identcode will automatically prepend missing zeros to the barcode text. Laminas\\Barcode\\Object\\Itf14 This barcode extends Laminas\\Barcode\\Object\\Code25interleaved (Code 2 of 5 Interleaved), inheriting its capabilities and defining some of its own. Name: ITF -14 Allowed characters: 0123456789 Checksum: mandatory (modulo 10) Length: 14 characters (including checksum) If the number of characters is lower than 14, Laminas\\Barcode\\Object\\Itf14 will automatically prepend missing zeros to the barcode text. Laminas\\Barcode\\Object\\Leitcode This barcode extends Laminas\\Barcode\\Object\\Identcode (Deutsche Post Identcode), inheriting its capabilities and defining some of its own: Name: Leitcode (Deutsche Post Leitcode) Allowed characters: 0123456789 Checksum: mandatory (modulo 10 different from Code25) Length: 14 characters (including checksum) If the number of characters is lower than 14, Laminas\\Barcode\\Object\\Leitcode will automatically prepend missing zeros to the barcode text. Laminas\\Barcode\\Object\\Planet Name: Planet (PostaL Alpha Numeric Encoding Technique) Allowed characters: 0123456789 Checksum: mandatory (modulo 10) Length: 12 or 14 characters (including checksum) Laminas\\Barcode\\Object\\Postnet Name: Postnet (POSTal Numeric Encoding Technique) Allowed characters: 0123456789 Checksum: mandatory (modulo 10) Length: 6, 7, 10, or 12 characters (including checksum) Laminas\\Barcode\\Object\\Royalmail Name: Royal Mail or RM4SCC (Royal Mail 4-State Customer Code) Allowed characters: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ Checksum: mandatory Length: variable Laminas\\Barcode\\Object\\Upca This barcode extends Laminas\\Barcode\\Object\\Ean13 ( EAN -13), inheriting some of its capabilities and defining some of its own. Name: UPC -A (Universal Product Code) Allowed characters: 0123456789 Checksum: mandatory (modulo 10) Length: 12 characters (including checksum) If the number of characters is lower than 12, Laminas\\Barcode\\Object\\Upca will automatically prepend missing zeros to the barcode text. The option withQuietZones has no effect with this barcode. Laminas\\Barcode\\Object\\Upce This barcode extends Laminas\\Barcode\\Object\\Upca ( UPC -A), inheriting some of its capabilities and defining some of its own. In particular, the first character of the text to encode is the system (0 or 1). Name: UPC -E (Universal Product Code) Allowed characters: 0123456789 Checksum: mandatory (modulo 10) Length: 8 characters (including checksum) If the number of characters is lower than 8, Laminas\\Barcode\\Object\\Upce will automatically prepend missing zeros to the barcode text. If the first character of the text to encode is not 0 or 1, Laminas\\Barcode\\Object\\Upce will automatically replace it with 0. The option withQuietZones has no effect with this barcode.","title":"Barcode Objects"},{"location":"objects/#barcode-objects","text":"Barcode objects allow you to generate barcodes independently of the rendering support. After generation, you can retrieve the barcode as an array of drawing instructions to provide to a renderer. Objects have a large number of options, most of which are common across all implementations. These options can be set in three ways: As an array or a Traversable object passed to the constructor. As an array passed to the setOptions() method. Via individual setters for each configuration type.","title":"Barcode Objects"},{"location":"objects/#different-ways-to-parameterize-a-barcode-object","text":"use Laminas\\Barcode\\Object; $options = ['text' =&gt; 'ZEND-FRAMEWORK', 'barHeight' =&gt; 40]; // Case 1: constructor $barcode = new Object\\Code39($options); // Case 2: setOptions() $barcode = new Object\\Code39(); $barcode-&gt;setOptions($options); // Case 3: individual setters $barcode = new Object\\Code39(); $barcode-&gt;setText('ZEND-FRAMEWORK') -&gt;setBarHeight(40);","title":"Different ways to parameterize a barcode object"},{"location":"objects/#common-options","text":"In the following list, the values have no units; as such, we will use the generic term \"unit.\" For example, the default value of the \"thin bar\" is \"1 unit\". The real units depend on the rendering support (see the [renderers documentation] (renderers.md) for more information). Setters are each named by uppercasing the initial letter of the option and prefixing the name with \"set\" (e.g. barHeight becomes setBarHeight ). All options have a corresponding getter prefixed with \"get\" (e.g. getBarHeight ). Available options are: Option Data Type Default Value Description barcodeNamespace string Laminas\\Barcode\\Object Namespace of the barcode; for example, if you need to extend the embedding objects. barHeight int 50 Height of the bars. barThickWidth int 3 Width of the thick bar. barThinWidth int 1 Width of the thin bar. factor int, float, string, or Bool 1 Factor by which to multiply bar widths and font sizes ( barHeight , barThinWidth , barThickWidth , and fontSize ). foreColor int 0x000000 (black) Color of the bar and the text. Could be provided as an integer or as a HTML value (e.g. #333333 ). backgroundColor int or string 0xFFFFFF (white) Color of the background. Could be provided as an integer or as a HTML value (e.g. #333333 ). orientation int, float, string, or Bool 0 Orientation of the barcode. font string or Int NULL Font path to a TTF font or a number between 1 and 5 if using image generation with GD (internal fonts). fontSize float 10 Size of the font (not applicable with numeric fonts). withBorder bool FALSE Draw a border around the barcode and the quiet zones. withQuietZones bool TRUE Leave a quiet zone before and after the barcode. drawText bool TRUE Set if the text is displayed below the barcode. stretchText bool FALSE Specify if the text is stretched all along the barcode. withChecksum bool FALSE Indicate whether or not the checksum is automatically added to the barcode. withChecksumInText bool FALSE Indicate whether or not the checksum is displayed in the textual representation. providedChecksum bool FALSE Indicate whether or not the checksum is provided with the barcode text. (Available since 2.8.0) text string NULL The text to represent as a barcode.","title":"Common Options"},{"location":"objects/#common-additional-getters","text":"Getter Data Type Description getType() string Return the name of the barcode class without the namespace (e.g. Laminas\\Barcode\\Object\\Code39 returns simply \"code39\"). getRawText() string Return the original text provided to the object. getTextToDisplay() string Return the text to display, including, if activated, the checksum value. getQuietZone() int Return the size of the space needed before and after the barcode without any drawing. getInstructions() array Return drawing instructions as an array.. getHeight($recalculate = false) int Return the height of the barcode calculated after possible rotation. getWidth($recalculate = false) int Return the width of the barcode calculated after possible rotation. getOffsetTop($recalculate = false) int Return the position of the top of the barcode calculated after possible rotation. getOffsetLeft($recalculate = false) int Return the position of the left of the barcode calculated after possible rotation.","title":"Common Additional Getters"},{"location":"objects/#description-of-shipped-barcodes","text":"Below is detailed information on all barcode types supported. Unless otherwise noted, each barcode supports the general options outlined in the previous section, and no others.","title":"Description of shipped barcodes"},{"location":"renderers/","text":"Barcode Renderers Renderers support options, most of which are common across all implementations. These options can be set in three ways: As an array or a Traversable object passed to the constructor. As an array passed to the setOptions() method. As discrete values passed to individual setters. Different ways to parameterize a renderer object use Laminas\\Barcode\\Renderer; $options = ['topOffset' =&gt; 10]; // Case 1 $renderer = new Renderer\\Pdf($options); // Case 2 $renderer = new Renderer\\Pdf(); $renderer-&gt;setOptions($options); // Case 3 $renderer = new Renderer\\Pdf(); $renderer-&gt;setTopOffset(10); Common Options In the following list, the values have no units; as such, we will use the generic term \"unit.\" For example, the default value of the \"thin bar\" is \"1 unit.\" The real units depend on the rendering support. The individual setters are obtained by uppercasing the initial letter of the option and prefixing the name with \"set\" (e.g. barHeight becomes setBarHeight ). All options have a correspondent getter prefixed with \"get\" (e.g. getBarHeight ). Available options are: Option Data Type Default Value Description rendererNamespace string Laminas\\Barcode\\Renderer Namespace of the renderer; for example, if you need to extend the renderers. horizontalPosition string \"left\" Can be \"left\", \"center\" or \"right\". Can be useful with PDF or if the setWidth() method is used with an image renderer. verticalPosition string \"top\" Can be \"top\", \"middle\" or \"bottom\". Can be useful with PDF or if the setHeight() method is used with an image renderer. leftOffset int 0 Top position of the barcode inside the renderer. If used, this value will override the horizontalPosition option. topOffset int 0 Top position of the barcode inside the renderer. If used, this value will override the verticalPosition option. automaticRenderError bool FALSE Whether or not to automatically render errors. If an exception occurs, the provided barcode object will be replaced with an Error representation. Note that some errors (or exceptions) can not be rendered. moduleSize float 1 Size of a rendering module in the support. barcode Laminas\\Barcode\\Object NULL The barcode object to render. An additional getter exists: getType() . It returns the name of the renderer class without the namespace (e.g. Laminas\\Barcode\\Renderer\\Image returns \"image\"). Laminas\\Barcode\\Renderer\\Image The image renderer will draw the instruction list of the barcode object in an image resource. The default width of a module is 1 pixel. Installation Requirements The PHP extension GD is required for the image renderer, so be sure to have it installed before getting started. Available options are: Option Data Type Default Value Description height int 0 Allow you to specify the height of the result image. If \"0\", the height will be calculated by the barcode object. width int 0 Allow you to specify the width of the result image. If \"0\", the width will be calculated by the barcode object. imageType string \"png\" Specify the image format. Can be \"png\", \"jpeg\", \"jpg\" or \"gif\". Laminas\\Barcode\\Renderer\\Pdf Deprecated Deprecated since 2.8.0, will be removed in 3.0.0. The PDF renderer is marked as deprecated because it uses the abandoned zendframework/zendpdf component. Installation Requirements The PDF renderer depends on the zendframework/zendpdf component, so be sure to have it installed before getting started: $ composer require zendframework/zendpdf The PDF renderer will draw the instruction list of the barcode object in a PDF document. The default width of a module is 0.5 point. There are no additional options for this renderer.","title":"Renderers"},{"location":"renderers/#barcode-renderers","text":"Renderers support options, most of which are common across all implementations. These options can be set in three ways: As an array or a Traversable object passed to the constructor. As an array passed to the setOptions() method. As discrete values passed to individual setters.","title":"Barcode Renderers"},{"location":"renderers/#different-ways-to-parameterize-a-renderer-object","text":"use Laminas\\Barcode\\Renderer; $options = ['topOffset' =&gt; 10]; // Case 1 $renderer = new Renderer\\Pdf($options); // Case 2 $renderer = new Renderer\\Pdf(); $renderer-&gt;setOptions($options); // Case 3 $renderer = new Renderer\\Pdf(); $renderer-&gt;setTopOffset(10);","title":"Different ways to parameterize a renderer object"},{"location":"renderers/#common-options","text":"In the following list, the values have no units; as such, we will use the generic term \"unit.\" For example, the default value of the \"thin bar\" is \"1 unit.\" The real units depend on the rendering support. The individual setters are obtained by uppercasing the initial letter of the option and prefixing the name with \"set\" (e.g. barHeight becomes setBarHeight ). All options have a correspondent getter prefixed with \"get\" (e.g. getBarHeight ). Available options are: Option Data Type Default Value Description rendererNamespace string Laminas\\Barcode\\Renderer Namespace of the renderer; for example, if you need to extend the renderers. horizontalPosition string \"left\" Can be \"left\", \"center\" or \"right\". Can be useful with PDF or if the setWidth() method is used with an image renderer. verticalPosition string \"top\" Can be \"top\", \"middle\" or \"bottom\". Can be useful with PDF or if the setHeight() method is used with an image renderer. leftOffset int 0 Top position of the barcode inside the renderer. If used, this value will override the horizontalPosition option. topOffset int 0 Top position of the barcode inside the renderer. If used, this value will override the verticalPosition option. automaticRenderError bool FALSE Whether or not to automatically render errors. If an exception occurs, the provided barcode object will be replaced with an Error representation. Note that some errors (or exceptions) can not be rendered. moduleSize float 1 Size of a rendering module in the support. barcode Laminas\\Barcode\\Object NULL The barcode object to render. An additional getter exists: getType() . It returns the name of the renderer class without the namespace (e.g. Laminas\\Barcode\\Renderer\\Image returns \"image\").","title":"Common Options"},{"location":"renderers/#laminasbarcoderendererimage","text":"The image renderer will draw the instruction list of the barcode object in an image resource. The default width of a module is 1 pixel. Installation Requirements The PHP extension GD is required for the image renderer, so be sure to have it installed before getting started. Available options are: Option Data Type Default Value Description height int 0 Allow you to specify the height of the result image. If \"0\", the height will be calculated by the barcode object. width int 0 Allow you to specify the width of the result image. If \"0\", the width will be calculated by the barcode object. imageType string \"png\" Specify the image format. Can be \"png\", \"jpeg\", \"jpg\" or \"gif\".","title":"Laminas\\Barcode\\Renderer\\Image"},{"location":"renderers/#laminasbarcoderendererpdf","text":"Deprecated Deprecated since 2.8.0, will be removed in 3.0.0. The PDF renderer is marked as deprecated because it uses the abandoned zendframework/zendpdf component. Installation Requirements The PDF renderer depends on the zendframework/zendpdf component, so be sure to have it installed before getting started: $ composer require zendframework/zendpdf The PDF renderer will draw the instruction list of the barcode object in a PDF document. The default width of a module is 0.5 point. There are no additional options for this renderer.","title":"Laminas\\Barcode\\Renderer\\Pdf"},{"location":"usage/","text":"Usage Laminas\\Barcode\\Barcode uses a factory method, factory() , to create both an instance of the barcode object to represent, and the renderer you will use to draw it. (Barcode objects extend Laminas\\Barcode\\Object\\AbstractObject , and renderers extend Laminas\\Barcode\\Renderer\\AbstractRenderer .) The factory() method accepts five arguments: The name of the barcode format (e.g., \"code39\") or a Traversable object (required). The name of the renderer (e.g., \"image\") (required). Options to pass to the barcode object (an array or a Traversable object) (optional). Options to pass to the renderer object (an array or a Traversable object) (optional). A boolean to indicate whether or not to automatically render errors. If an exception occurs, the provided barcode object will be replaced with an error representation (optional default TRUE ). On success, the factory method returns an instance of the renderer. Getting a Renderer with Laminas\\Barcode\\Barcode::factory() Laminas\\Barcode\\Barcode::factory() instantiates both the barcode and renderer instance, and binds them. In this first example, we will use the Code39 barcode type together with the Image renderer. use Laminas\\Barcode\\Barcode; // Only the text to draw is required. $barcodeOptions = ['text' =&gt; 'ZEND-FRAMEWORK']; // No required options. $rendererOptions = []; $renderer = Barcode::factory( 'code39', 'image', $barcodeOptions, $rendererOptions ); Using laminas-config You may pass a Laminas\\Config\\Config instance to the factory in order to create the necessary objects. The following example is functionally equivalent to the previous. use Laminas\\Config\\Config; use Laminas\\Barcode\\Barcode; // Using a single Laminas\\Config\\Config object: $config = new Config([ 'barcode' =&gt; 'code39', 'barcodeParams' =&gt; ['text' =&gt; 'ZEND-FRAMEWORK'], 'renderer' =&gt; 'image', 'rendererParams' =&gt; ['imageType' =&gt; 'gif'], ]); $renderer = Barcode::factory($config); Drawing a barcode When you draw the barcode, you retrieve the resource in which the barcode is drawn. To draw a barcode, call the draw() of the renderer, or use the proxy method provided by Laminas\\Barcode\\Barcode . Drawing a barcode with the renderer object use Laminas\\Barcode\\Barcode; // Only the text to draw is required. $barcodeOptions = ['text' =&gt; 'ZEND-FRAMEWORK']; // No required options. $rendererOptions = []; // Draw the barcode, capturing the resource: $renderer = Barcode::factory( 'code39', 'image', $barcodeOptions, $rendererOptions ); $imageResource = $renderer-&gt;draw(); Drawing a barcode with Laminas\\Barcode\\Barcode::draw() The static draw() method is a shortcut for calling factory() + draw() : use Laminas\\Barcode\\Barcode; // Only the text to draw is required. $barcodeOptions = ['text' =&gt; 'ZEND-FRAMEWORK']; // No required options. $rendererOptions = []; // Draw the barcode, capturing the resource: $imageResource = Barcode::draw( 'code39', 'image', $barcodeOptions, $rendererOptions ); Rendering a barcode In the previous section, we were drawing , which returns the resource representing the barcode, but does not actually emit it (e.g., to the browser). To emit the barcode, call the render() method of the renderer, or use the proxy method provided by Laminas\\Barcode\\Barcode . Rendering a barcode with the renderer object use Laminas\\Barcode\\Barcode; // Only the text to draw is required $barcodeOptions = ['text' =&gt; 'ZEND-FRAMEWORK']; // No required options $rendererOptions = []; // Draw the barcode, // send the headers, and emit the image: Barcode::factory( 'code39', 'image', $barcodeOptions, $rendererOptions )-&gt;render(); This will generate the following barcode: Rendering a barcode with Laminas\\Barcode\\Barcode::render() use Laminas\\Barcode\\Barcode; // Only the text to draw is required $barcodeOptions = ['text' =&gt; 'ZEND-FRAMEWORK']; // No required options $rendererOptions = []; // Draw the barcode, // send the headers, and emit the image: Barcode::render( 'code39', 'image', $barcodeOptions, $rendererOptions ); This will generate the same barcode as the previous example.","title":"Usage"},{"location":"usage/#usage","text":"Laminas\\Barcode\\Barcode uses a factory method, factory() , to create both an instance of the barcode object to represent, and the renderer you will use to draw it. (Barcode objects extend Laminas\\Barcode\\Object\\AbstractObject , and renderers extend Laminas\\Barcode\\Renderer\\AbstractRenderer .) The factory() method accepts five arguments: The name of the barcode format (e.g., \"code39\") or a Traversable object (required). The name of the renderer (e.g., \"image\") (required). Options to pass to the barcode object (an array or a Traversable object) (optional). Options to pass to the renderer object (an array or a Traversable object) (optional). A boolean to indicate whether or not to automatically render errors. If an exception occurs, the provided barcode object will be replaced with an error representation (optional default TRUE ). On success, the factory method returns an instance of the renderer.","title":"Usage"},{"location":"usage/#getting-a-renderer-with-laminasbarcodebarcodefactory","text":"Laminas\\Barcode\\Barcode::factory() instantiates both the barcode and renderer instance, and binds them. In this first example, we will use the Code39 barcode type together with the Image renderer. use Laminas\\Barcode\\Barcode; // Only the text to draw is required. $barcodeOptions = ['text' =&gt; 'ZEND-FRAMEWORK']; // No required options. $rendererOptions = []; $renderer = Barcode::factory( 'code39', 'image', $barcodeOptions, $rendererOptions );","title":"Getting a Renderer with Laminas\\Barcode\\Barcode::factory()"},{"location":"usage/#drawing-a-barcode","text":"When you draw the barcode, you retrieve the resource in which the barcode is drawn. To draw a barcode, call the draw() of the renderer, or use the proxy method provided by Laminas\\Barcode\\Barcode .","title":"Drawing a barcode"},{"location":"usage/#rendering-a-barcode","text":"In the previous section, we were drawing , which returns the resource representing the barcode, but does not actually emit it (e.g., to the browser). To emit the barcode, call the render() method of the renderer, or use the proxy method provided by Laminas\\Barcode\\Barcode .","title":"Rendering a barcode"}]}